import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import edu.wpi.first.wpilibj.vision.VisionPipeline;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
* GripPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class GripPipeline implements VisionPipeline {

	//Outputs
	private Mat cvExtractchannel0Output = new Mat();
	private Mat cvExtractchannel1Output = new Mat();
	private Mat cvExtractchannel2Output = new Mat();
	private Mat cvThreshold0Output = new Mat();
	private Mat cvThreshold1Output = new Mat();
	private Mat cvThreshold2Output = new Mat();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override	public void process(Mat source0) {
		// Step CV_extractChannel0:
		Mat cvExtractchannel0Src = source0;
		double cvExtractchannel0Channel = 0.0;
		cvExtractchannel(cvExtractchannel0Src, cvExtractchannel0Channel, cvExtractchannel0Output);

		// Step CV_extractChannel1:
		Mat cvExtractchannel1Src = source0;
		double cvExtractchannel1Channel = 1.0;
		cvExtractchannel(cvExtractchannel1Src, cvExtractchannel1Channel, cvExtractchannel1Output);

		// Step CV_extractChannel2:
		Mat cvExtractchannel2Src = source0;
		double cvExtractchannel2Channel = 2.0;
		cvExtractchannel(cvExtractchannel2Src, cvExtractchannel2Channel, cvExtractchannel2Output);

		// Step CV_Threshold0:
		Mat cvThreshold0Src = cvExtractchannel0Output;
		double cvThreshold0Thresh = 81.0;
		double cvThreshold0Maxval = 255.0;
		int cvThreshold0Type = Imgproc.THRESH_BINARY_INV;
		cvThreshold(cvThreshold0Src, cvThreshold0Thresh, cvThreshold0Maxval, cvThreshold0Type, cvThreshold0Output);

		// Step CV_Threshold1:
		Mat cvThreshold1Src = cvExtractchannel1Output;
		double cvThreshold1Thresh = 104.0;
		double cvThreshold1Maxval = 255.0;
		int cvThreshold1Type = Imgproc.THRESH_BINARY_INV;
		cvThreshold(cvThreshold1Src, cvThreshold1Thresh, cvThreshold1Maxval, cvThreshold1Type, cvThreshold1Output);

		// Step CV_Threshold2:
		Mat cvThreshold2Src = cvExtractchannel2Output;
		double cvThreshold2Thresh = 91.0;
		double cvThreshold2Maxval = 255.0;
		int cvThreshold2Type = Imgproc.THRESH_BINARY_INV;
		cvThreshold(cvThreshold2Src, cvThreshold2Thresh, cvThreshold2Maxval, cvThreshold2Type, cvThreshold2Output);

	}

	/**
	 * This method is a generated getter for the output of a CV_extractChannel.
	 * @return Mat output from CV_extractChannel.
	 */
	public Mat cvExtractchannel0Output() {
		return cvExtractchannel0Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_extractChannel.
	 * @return Mat output from CV_extractChannel.
	 */
	public Mat cvExtractchannel1Output() {
		return cvExtractchannel1Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_extractChannel.
	 * @return Mat output from CV_extractChannel.
	 */
	public Mat cvExtractchannel2Output() {
		return cvExtractchannel2Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_Threshold.
	 * @return Mat output from CV_Threshold.
	 */
	public Mat cvThreshold0Output() {
		return cvThreshold0Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_Threshold.
	 * @return Mat output from CV_Threshold.
	 */
	public Mat cvThreshold1Output() {
		return cvThreshold1Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_Threshold.
	 * @return Mat output from CV_Threshold.
	 */
	public Mat cvThreshold2Output() {
		return cvThreshold2Output;
	}


	/**
	 * Extracts given channel from an image.
	 * @param src the image to extract.
	 * @param channel zero indexed channel number to extract.
	 * @param dst output image.
	 */
	private void cvExtractchannel(Mat src, double channel, Mat dst) {
		Core.extractChannel(src, dst, (int)channel);
	}

	/**
	 * Apply a fixed-level threshold to each array element in an image.
	 * @param src Image to threshold.
	 * @param threshold threshold value.
	 * @param maxVal Maximum value for THRES_BINARY and THRES_BINARY_INV
	 * @param type Type of threshold to appy.
	 * @param dst output Image.
	 */
	private void cvThreshold(Mat src, double threshold, double maxVal, int type,
		Mat dst) {
		Imgproc.threshold(src, dst, threshold, maxVal, type);
	}




}

